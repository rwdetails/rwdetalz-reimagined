import { useState } from "react";
import Navbar from "@/components/Navbar";
import Footer from "@/components/Footer";
import ChatWidget from "@/components/ChatWidget";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MapPin, Calendar as CalendarIcon, Check, Trash2, Droplets, Sparkles, Car, Clock } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import { useToast } from "@/hooks/use-toast";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import AddressAutocomplete from "@/components/AddressAutocomplete";

const services = [
  { id: "pressure-wash", name: "Pressure Washing", description: "High-pressure cleaning for driveways", price: 79.99, icon: Droplets, available: true },
  { id: "roof-gutter", name: "Roof & Gutter Cleaning", description: "Professional roof and gutter maintenance", price: 99.99, icon: Sparkles, available: true },
  { id: "driveway-sidewalk", name: "Driveway & Sidewalk Cleaning", description: "Deep clean concrete surfaces", price: 59.99, icon: Droplets, available: true },
  { id: "trash-can", name: "Trash Can Cleaning", description: "Sanitize and deodorize bins", price: 39.99, icon: Trash2, available: true },
  { id: "window-cleaning", name: "Window Cleaning", description: "Crystal clear windows", price: 59.99, icon: Sparkles, available: false, comingSoon: true },
  { id: "exterior-car-wash", name: "Exterior Car Wash", description: "Professional vehicle exterior", price: 39.99, icon: Car, available: false, comingSoon: true },
  { id: "full-detail", name: "Full Detail Car Wash", description: "Complete detailing", price: 149.99, icon: Car, available: false, comingSoon: true },
  { id: "fence-deck", name: "Fence & Deck Restoration", description: "Restore wood surfaces", price: 89.99, icon: Sparkles, available: false, comingSoon: true },
  { id: "house-exterior", name: "House Exterior Wash", description: "Complete exterior cleaning", price: 129.99, icon: Droplets, available: false, comingSoon: true },
  { id: "solar-panel", name: "Solar Panel Cleaning", description: "Maximize efficiency", price: 79.99, icon: Sparkles, available: false, comingSoon: true },
];

const Booking = () => {
  const [address, setAddress] = useState("");
  const [date, setDate] = useState<Date>();
  const [selectedService, setSelectedService] = useState<string>("");
  const [selectedTime, setSelectedTime] = useState("");
  const [customerEmail, setCustomerEmail] = useState("");
  const [specialNotes, setSpecialNotes] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();

  const timeSlots = [
    "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM",
    "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM",
    "4:00 PM", "5:00 PM"
  ];

  const handleBooking = async () => {
    if (!address || !date || !selectedService || !selectedTime) {
      toast({
        title: "Missing Information",
        description: "Please fill in all booking details",
        variant: "destructive",
      });
      return;
    }

    setIsSubmitting(true);

    try {
      const selectedServiceData = services.find(s => s.id === selectedService);
      
      const { error } = await supabase.functions.invoke('send-booking-confirmation', {
        body: {
          customerEmail: customerEmail || undefined,
          address,
          service: selectedServiceData?.name,
          date: format(date, "PPP"),
          time: selectedTime,
          price: selectedServiceData?.price || 0,
          specialNotes: specialNotes || undefined,
        },
      });

      if (error) throw error;

      toast({
        title: "Booking Confirmed! ðŸŽ‰",
        description: "Confirmation email sent successfully!",
      });

      setTimeout(() => {
        navigate("/tracking");
      }, 2000);
    } catch (error: any) {
      console.error("Booking error:", error);
      toast({
        title: "Booking Error",
        description: "Failed to send confirmation. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex flex-col">
      <Navbar />
      <ChatWidget />
      
      <main className="container mx-auto px-4 pt-24 pb-16">
        <div className="max-w-6xl mx-auto space-y-8">
          <div className="text-center space-y-4">
            <h1 className="text-4xl md:text-5xl font-bold">
              Book Your <span className="text-primary">Service</span>
            </h1>
            <p className="text-muted-foreground text-lg">
              Choose your service, pick a time, and we'll handle the rest
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-8">
            <div className="space-y-6">
              <Card className="border-border/50 bg-card/50 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="w-5 h-5 text-primary" />
                    Service Location
                  </CardTitle>
                  <CardDescription>Where should we come?</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="address">Service Address</Label>
                    <AddressAutocomplete
                      value={address}
                      onChange={setAddress}
                      className="bg-background/50"
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Email Address (optional)</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="your@email.com"
                      value={customerEmail}
                      onChange={(e) => setCustomerEmail(e.target.value)}
                      className="bg-background/50"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Receive booking confirmation and updates
                    </p>
                  </div>
                  <div>
                    <Label htmlFor="notes">Special Instructions (optional)</Label>
                    <Textarea
                      id="notes"
                      placeholder="Gate code, parking instructions, specific areas to focus on, etc."
                      value={specialNotes}
                      onChange={(e) => setSpecialNotes(e.target.value)}
                      className="bg-background/50 min-h-[100px]"
                    />
                    <p className="text-xs text-muted-foreground mt-1">
                      Let us know any special requirements or access details
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card className="border-border/50 bg-card/50 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle>Select Service</CardTitle>
                  <CardDescription>Choose from our available services</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  {services.map((service) => {
                    const Icon = service.icon;
                    const isComingSoon = 'comingSoon' in service && service.comingSoon;
                    return (
                      <button
                        key={service.id}
                        onClick={() => service.available && setSelectedService(service.id)}
                        disabled={!service.available}
                        className={cn(
                          "w-full p-4 rounded-lg border text-left transition-all duration-300 relative",
                          "hover:border-primary/50 hover:bg-primary/5",
                          selectedService === service.id && "border-primary bg-primary/10 glow",
                          !service.available && "opacity-60 cursor-not-allowed"
                        )}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex gap-3 flex-1">
                            <Icon className={cn("w-5 h-5 mt-1 flex-shrink-0", selectedService === service.id ? "text-primary" : "text-muted-foreground")} />
                            <div className="flex-1">
                              <div className="flex items-center gap-2 flex-wrap">
                                <span className="font-semibold">{service.name}</span>
                                {isComingSoon && (
                                  <Badge variant="secondary" className="text-xs">
                                    <Clock className="w-3 h-3 mr-1" />
                                    Coming Soon
                                  </Badge>
                                )}
                              </div>
                              <div className="text-sm text-muted-foreground mt-1">{service.description}</div>
                            </div>
                          </div>
                          <div className="flex items-center gap-2 flex-shrink-0 ml-2">
                            <span className="font-bold text-primary">${service.price}</span>
                            {selectedService === service.id && (
                              <Check className="w-5 h-5 text-primary" />
                            )}
                          </div>
                        </div>
                      </button>
                    );
                  })}
                </CardContent>
              </Card>
            </div>

            <div className="space-y-6">
              <Card className="border-border/50 bg-card/50 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CalendarIcon className="w-5 h-5 text-primary" />
                    Pick a Date
                  </CardTitle>
                  <CardDescription>When would you like service?</CardDescription>
                </CardHeader>
                <CardContent>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className={cn(
                          "w-full justify-start text-left font-normal bg-background/50",
                          !date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {date ? format(date, "PPP") : "Select a date"}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={date}
                        onSelect={setDate}
                        disabled={(date) => date < new Date()}
                        initialFocus
                        className="pointer-events-auto"
                      />
                    </PopoverContent>
                  </Popover>
                </CardContent>
              </Card>

              <Card className="border-border/50 bg-card/50 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle>Select Time</CardTitle>
                  <CardDescription>Choose your preferred time slot</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-2">
                    {timeSlots.map((time) => (
                      <Button
                        key={time}
                        variant="outline"
                        onClick={() => setSelectedTime(time)}
                        className={cn(
                          "bg-background/50 hover:bg-primary/10 hover:border-primary/50 transition-all",
                          selectedTime === time && "bg-primary/10 border-primary glow"
                        )}
                      >
                        {time}
                      </Button>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card className="border-primary/50 bg-gradient-to-br from-primary/10 to-secondary/10 backdrop-blur-sm">
                <CardHeader>
                  <CardTitle>Booking Summary</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Service:</span>
                      <span className="font-medium">
                        {selectedService ? services.find(s => s.id === selectedService)?.name : "Not selected"}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Date:</span>
                      <span className="font-medium">{date ? format(date, "PPP") : "Not selected"}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Time:</span>
                      <span className="font-medium">{selectedTime || "Not selected"}</span>
                    </div>
                    <div className="pt-2 border-t border-border/50 flex justify-between text-lg">
                      <span className="font-semibold">Total:</span>
                      <span className="font-bold text-primary">
                        ${selectedService ? services.find(s => s.id === selectedService)?.price : "0.00"}
                      </span>
                    </div>
                  </div>
                  
                  <Button 
                    onClick={handleBooking}
                    disabled={isSubmitting}
                    className="w-full bg-primary text-primary-foreground hover:bg-primary/90 glow"
                    size="lg"
                  >
                    {isSubmitting ? "Processing..." : "Confirm Booking"}
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Booking;
